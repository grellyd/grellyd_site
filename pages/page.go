package pages

import (
	"io/ioutil"
	"fmt"
	"os"
)

// Page on the disk, in pages/ generated by hugo
type Page struct {
	Title string
	Body  []byte
	File  *os.File
	PageType PageType
	Ending PageEnding
}

// Save a page
func (p *Page) Save() error {
	filename := fmt.Sprintf("pages/%s.%s", p.Title, p.Ending) 
	return ioutil.WriteFile(filename, p.Body, 0600)
}

// Load a page
func Load(ptype PageType, title string, pending PageEnding) (*Page, error) {
	filename := fmt.Sprintf("public/%s/%s.%s", ptype, title, pending)
	// TODO: Combine the two accesses
	file, err := os.OpenFile(filename, os.O_RDONLY, 444)
	body, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, fmt.Errorf("unable to load the page: %s", err)
	}
	return &Page{Title: title, Body: body, File: file}, nil
}
